{"ast":null,"code":"//ACTION TYPES\nconst GET_PRODUCTS = 'get/products';\n\n//ACTIONS\nexport const get_products = data => {\n  return {\n    type: GET_PRODUCTS,\n    payload: data\n  };\n};\n\n// THUNKS\nexport const getAllProductThunk = () => async (dispatch, getState) => {\n  const res = await fetch('/api/products', {\n    method: \"GET\"\n  });\n  if (res.ok) {\n    const data = await res.json();\n    dispatch(get_products(data));\n    return data;\n  } else {\n    const errorData = await res.json();\n    throw new Error(errorData.error || 'Failed to fetch data');\n  }\n};\n\n//REDUCDER\nconst inital_state = {\n  allProducts: {}\n};\nconst productReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : inital_state;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_PRODUCTS:\n      const newState = {\n        ...state,\n        allProducts: {\n          ...state.allProducts\n        }\n      };\n      //make a copy of all the keys in the data not whats in them\n      newState.allProducts = action.payload.data;\n      return newState;\n    default:\n      return state;\n  }\n};\nexport default productReducer;","map":{"version":3,"names":["GET_PRODUCTS","get_products","data","type","payload","getAllProductThunk","dispatch","getState","res","fetch","method","ok","json","errorData","Error","error","inital_state","allProducts","productReducer","state","action","newState"],"sources":["/Users/zenw/Capstone/Captone-Project/react-app/src/store/products.js"],"sourcesContent":["\n//ACTION TYPES\nconst GET_PRODUCTS = 'get/products'\n\n\n\n\n//ACTIONS\nexport const get_products = (data) =>{\n    return {\n        type:GET_PRODUCTS,\n        payload:data\n    }\n}\n\n\n\n\n\n\n\n\n// THUNKS\nexport const getAllProductThunk = () => async (dispatch, getState) => {\n\n   \n        const res = await fetch('/api/products',{\n            method: \"GET\"\n        });\n\n        if (res.ok) {\n            const data = await res.json();\n            dispatch(get_products(data));\n            return data;\n        } else {\n          \n            const errorData = await res.json();\n            throw new Error(errorData.error || 'Failed to fetch data');\n        }\n    \n}\n\n\n//REDUCDER\nconst inital_state = {allProducts:{}}\n\nconst productReducer = (state=inital_state, action)=>{\n\n    switch(action.type) {\n        case GET_PRODUCTS:\n            const newState = {...state, allProducts:{...state.allProducts}}\n            //make a copy of all the keys in the data not whats in them\n            newState.allProducts = action.payload.data\n            return newState\n        default:\n            return state\n\n    }\n}\n\n\nexport default productReducer"],"mappings":"AACA;AACA,MAAMA,YAAY,GAAG,cAAc;;AAKnC;AACA,OAAO,MAAMC,YAAY,GAAIC,IAAI,IAAI;EACjC,OAAO;IACHC,IAAI,EAACH,YAAY;IACjBI,OAAO,EAACF;EACZ,CAAC;AACL,CAAC;;AASD;AACA,OAAO,MAAMG,kBAAkB,GAAG,MAAM,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EAG9D,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,eAAe,EAAC;IACpCC,MAAM,EAAE;EACZ,CAAC,CAAC;EAEF,IAAIF,GAAG,CAACG,EAAE,EAAE;IACR,MAAMT,IAAI,GAAG,MAAMM,GAAG,CAACI,IAAI,EAAE;IAC7BN,QAAQ,CAACL,YAAY,CAACC,IAAI,CAAC,CAAC;IAC5B,OAAOA,IAAI;EACf,CAAC,MAAM;IAEH,MAAMW,SAAS,GAAG,MAAML,GAAG,CAACI,IAAI,EAAE;IAClC,MAAM,IAAIE,KAAK,CAACD,SAAS,CAACE,KAAK,IAAI,sBAAsB,CAAC;EAC9D;AAER,CAAC;;AAGD;AACA,MAAMC,YAAY,GAAG;EAACC,WAAW,EAAC,CAAC;AAAC,CAAC;AAErC,MAAMC,cAAc,GAAG,YAA8B;EAAA,IAA7BC,KAAK,uEAACH,YAAY;EAAA,IAAEI,MAAM;EAE9C,QAAOA,MAAM,CAACjB,IAAI;IACd,KAAKH,YAAY;MACb,MAAMqB,QAAQ,GAAG;QAAC,GAAGF,KAAK;QAAEF,WAAW,EAAC;UAAC,GAAGE,KAAK,CAACF;QAAW;MAAC,CAAC;MAC/D;MACAI,QAAQ,CAACJ,WAAW,GAAGG,MAAM,CAAChB,OAAO,CAACF,IAAI;MAC1C,OAAOmB,QAAQ;IACnB;MACI,OAAOF,KAAK;EAAA;AAGxB,CAAC;AAGD,eAAeD,cAAc"},"metadata":{},"sourceType":"module"}